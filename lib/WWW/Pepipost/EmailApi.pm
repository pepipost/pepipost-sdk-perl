#
# Copyright 2016 SmartBear Software
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
#
package WWW::Pepipost::EmailApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);
use Data::Dumper;

use WWW::Pepipost::ApiClient;
use WWW::Pepipost::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => WWW::Pepipost::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# send
#
# 
# 
# @param Emailv1 $data Data in JSON format (required)
{
    my $params = {
    'data' => {
        data_type => 'Emailv1',
        description => 'Data in JSON format',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ send } = { 
    	summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub send {
    my ($self, %args) = @_;

    # verify the required parameter 'data' is set
    unless (exists $args{'data'}) {
      croak("Missing the required parameter 'data' when calling send");
    }

    # parse inputs
    my $_resource_path = '/api/web.send.json';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # body params
    if ( exists $args{'data'}) {
        $_body_data = $args{'data'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    #for debugging
    #print Dumper($_body_data);
    return $response;
}

#
# api_web_send_rest_get
#
# 
# 
# @param string $api_key Your API Key (required)
# @param string $from From email address (required)
# @param string $subject Subject of the Email (required)
# @param string $content Email body in html (to use attributes to display dynamic values such as name, account number, etc. for ex. [% NAME %] for ATT_NAME , [% AGE %] for ATT_AGE etc.) (required)
# @param string $recipients Email addresses for recipients (multiple values allowed) (required)
# @param string $fromname Email Sender name (optional)
# @param string $replytoid Reply to email address (optional)
# @param boolean $footer Set &#39;0&#39; or &#39;1&#39; in order to include footer or not (optional, default to true)
# @param int $template Email template ID (optional)
# @param string $attachmentid specify uploaded attachments id (Multiple attachments are allowed) (optional)
# @param boolean $clicktrack set \u20180\u2019 or \u20181\u2019 in-order to disable or enable the click-track (optional, default to true)
# @param boolean $opentrack set open-track value to \u20180\u2019 or \u20181\u2019 in-order to disable or enable (optional, default to true)
# @param string $bcc Email address for bcc (optional)
# @param string $att_name Specify attributes followed by ATT_ for recipient to personalized email for ex. ATT_NAME for name, ATT_AGE for age etc. (Multiple attributes are allowed) (optional)
# @param string $x_apiheader Your defined unique identifier (optional)
# @param string $tags To relate each message. Useful for reports. (optional, default to )
{
    my $params = {
    'api_key' => {
        data_type => 'string',
        description => 'Your API Key',
        required => '1',
    },
    'from' => {
        data_type => 'string',
        description => 'From email address',
        required => '1',
    },
    'subject' => {
        data_type => 'string',
        description => 'Subject of the Email',
        required => '1',
    },
    'content' => {
        data_type => 'string',
        description => 'Email body in html (to use attributes to display dynamic values such as name, account number, etc. for ex. [% NAME %] for ATT_NAME , [% AGE %] for ATT_AGE etc.)',
        required => '1',
    },
    'recipients' => {
        data_type => 'string',
        description => 'Email addresses for recipients (multiple values allowed)',
        required => '1',
    },
    'fromname' => {
        data_type => 'string',
        description => 'Email Sender name',
        required => '0',
    },
    'replytoid' => {
        data_type => 'string',
        description => 'Reply to email address',
        required => '0',
    },
    'footer' => {
        data_type => 'boolean',
        description => 'Set &#39;0&#39; or &#39;1&#39; in order to include footer or not',
        required => '0',
    },
    'template' => {
        data_type => 'int',
        description => 'Email template ID',
        required => '0',
    },
    'attachmentid' => {
        data_type => 'string',
        description => 'specify uploaded attachments id (Multiple attachments are allowed)',
        required => '0',
    },
    'clicktrack' => {
        data_type => 'boolean',
        description => 'set \u20180\u2019 or \u20181\u2019 in-order to disable or enable the click-track',
        required => '0',
    },
    'opentrack' => {
        data_type => 'boolean',
        description => 'set open-track value to \u20180\u2019 or \u20181\u2019 in-order to disable or enable',
        required => '0',
    },
    'bcc' => {
        data_type => 'string',
        description => 'Email address for bcc',
        required => '0',
    },
    'att_name' => {
        data_type => 'string',
        description => 'Specify attributes followed by ATT_ for recipient to personalized email for ex. ATT_NAME for name, ATT_AGE for age etc. (Multiple attributes are allowed)',
        required => '0',
    },
    'x_apiheader' => {
        data_type => 'string',
        description => 'Your defined unique identifier',
        required => '0',
    },
    'tags' => {
        data_type => 'string',
        description => 'To relate each message. Useful for reports.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ api_web_send_rest_get } = { 
    	summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub api_web_send_rest_get {
    my ($self, %args) = @_;

    # verify the required parameter 'api_key' is set
    unless (exists $args{'api_key'}) {
      croak("Missing the required parameter 'api_key' when calling api_web_send_rest_get");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling api_web_send_rest_get");
    }

    # verify the required parameter 'subject' is set
    unless (exists $args{'subject'}) {
      croak("Missing the required parameter 'subject' when calling api_web_send_rest_get");
    }

    # verify the required parameter 'content' is set
    unless (exists $args{'content'}) {
      croak("Missing the required parameter 'content' when calling api_web_send_rest_get");
    }

    # verify the required parameter 'recipients' is set
    unless (exists $args{'recipients'}) {
      croak("Missing the required parameter 'recipients' when calling api_web_send_rest_get");
    }

    # parse inputs
    my $_resource_path = '/api/web.send.rest';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'api_key'}) {
        $query_params->{'api_key'} = $self->{api_client}->to_query_value($args{'api_key'});
    }

    # query params
    if ( exists $args{'fromname'}) {
        $query_params->{'fromname'} = $self->{api_client}->to_query_value($args{'fromname'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'replytoid'}) {
        $query_params->{'replytoid'} = $self->{api_client}->to_query_value($args{'replytoid'});
    }

    # query params
    if ( exists $args{'subject'}) {
        $query_params->{'subject'} = $self->{api_client}->to_query_value($args{'subject'});
    }

    # query params
    if ( exists $args{'content'}) {
        $query_params->{'content'} = $self->{api_client}->to_query_value($args{'content'});
    }

    # query params
    if ( exists $args{'footer'}) {
        $query_params->{'footer'} = $self->{api_client}->to_query_value($args{'footer'});
    }

    # query params
    if ( exists $args{'template'}) {
        $query_params->{'template'} = $self->{api_client}->to_query_value($args{'template'});
    }

    # query params
    if ( exists $args{'attachmentid'}) {
        $query_params->{'attachmentid'} = $self->{api_client}->to_query_value($args{'attachmentid'});
    }

    # query params
    if ( exists $args{'clicktrack'}) {
        $query_params->{'clicktrack'} = $self->{api_client}->to_query_value($args{'clicktrack'});
    }

    # query params
    if ( exists $args{'opentrack'}) {
        $query_params->{'opentrack'} = $self->{api_client}->to_query_value($args{'opentrack'});
    }

    # query params
    if ( exists $args{'bcc'}) {
        $query_params->{'bcc'} = $self->{api_client}->to_query_value($args{'bcc'});
    }

    # query params
    if ( exists $args{'recipients'}) {
        $query_params->{'recipients'} = $self->{api_client}->to_query_value($args{'recipients'});
    }

    # query params
    if ( exists $args{'att_name'}) {
        $query_params->{'ATT_NAME'} = $self->{api_client}->to_query_value($args{'att_name'});
    }

    # query params
    if ( exists $args{'x_apiheader'}) {
        $query_params->{'X-APIHEADER'} = $self->{api_client}->to_query_value($args{'x_apiheader'});
    }

    # query params
    if ( exists $args{'tags'}) {
        $query_params->{'tags'} = $self->{api_client}->to_query_value($args{'tags'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# v1_emails_json_post
#
# 
# 
# @param string $api_key Your API Key (required)
# @param string $from From email address (required)
# @param string $subject Subject of the Email (required)
# @param string $content Email body in html (to use attributes to display dynamic values such as name, account number, etc. for ex. [% NAME %].) (required)
# @param ARRAY[string] $recipients Email addresses for recipients (multiple values allowed). (required)
# @param string $fromname Email Sender name (optional)
# @param string $replytoid Reply to email address (optional)
# @param boolean $footer Set &#39;0&#39; or &#39;1&#39; in order to include footer or not (optional, default to true)
# @param int $template Email template ID (optional)
# @param ARRAY[int] $attachmentid specify uploaded attachments id (Multiple attachments are allowed) (optional)
# @param boolean $clicktrack set \u20180\u2019 or \u20181\u2019 in-order to disable or enable the click-track (optional, default to true)
# @param boolean $opentrack set open-track value to \u20180\u2019 or \u20181\u2019 in-order to disable or enable (optional, default to true)
# @param ARRAY[string] $bcc Email address for bcc (optional)
# @param ARRAY[string] $x_apiheader Your defined unique identifier (optional)
# @param ARRAY[string] $tags[] To relate each message. Useful for reports. (optional)
# @param ARRAY[string] $attributenames Specify attributes names (optional)
# @param ARRAY[string] $attributevalues Specify attributes values (optional)
{
    my $params = {
    'api_key' => {
        data_type => 'string',
        description => 'Your API Key',
        required => '1',
    },
    'from' => {
        data_type => 'string',
        description => 'From email address',
        required => '1',
    },
    'subject' => {
        data_type => 'string',
        description => 'Subject of the Email',
        required => '1',
    },
    'content' => {
        data_type => 'string',
        description => 'Email body in html (to use attributes to display dynamic values such as name, account number, etc. for ex. [% NAME %].)',
        required => '1',
    },
    'recipients' => {
        data_type => 'ARRAY[string]',
        description => 'Email addresses for recipients (multiple values allowed).',
        required => '1',
    },
    'fromname' => {
        data_type => 'string',
        description => 'Email Sender name',
        required => '0',
    },
    'replytoid' => {
        data_type => 'string',
        description => 'Reply to email address',
        required => '0',
    },
    'footer' => {
        data_type => 'boolean',
        description => 'Set &#39;0&#39; or &#39;1&#39; in order to include footer or not',
        required => '0',
    },
    'template' => {
        data_type => 'int',
        description => 'Email template ID',
        required => '0',
    },
    'attachmentid' => {
        data_type => 'ARRAY[int]',
        description => 'specify uploaded attachments id (Multiple attachments are allowed)',
        required => '0',
    },
    'clicktrack' => {
        data_type => 'boolean',
        description => 'set \u20180\u2019 or \u20181\u2019 in-order to disable or enable the click-track',
        required => '0',
    },
    'opentrack' => {
        data_type => 'boolean',
        description => 'set open-track value to \u20180\u2019 or \u20181\u2019 in-order to disable or enable',
        required => '0',
    },
    'bcc' => {
        data_type => 'ARRAY[string]',
        description => 'Email address for bcc',
        required => '0',
    },
    'x_apiheader' => {
        data_type => 'ARRAY[string]',
        description => 'Your defined unique identifier',
        required => '0',
    },
    'tags[]' => {
        data_type => 'ARRAY[string]',
        description => 'To relate each message. Useful for reports.',
        required => '0',
    },
    'attributenames' => {
        data_type => 'ARRAY[string]',
        description => 'Specify attributes names',
        required => '0',
    },
    'attributevalues' => {
        data_type => 'ARRAY[string]',
        description => 'Specify attributes values',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ v1_emails_json_post } = { 
    	summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub v1_emails_json_post {
    my ($self, %args) = @_;

    # verify the required parameter 'api_key' is set
    unless (exists $args{'api_key'}) {
      croak("Missing the required parameter 'api_key' when calling v1_emails_json_post");
    }

    # verify the required parameter 'from' is set
    unless (exists $args{'from'}) {
      croak("Missing the required parameter 'from' when calling v1_emails_json_post");
    }

    # verify the required parameter 'subject' is set
    unless (exists $args{'subject'}) {
      croak("Missing the required parameter 'subject' when calling v1_emails_json_post");
    }

    # verify the required parameter 'content' is set
    unless (exists $args{'content'}) {
      croak("Missing the required parameter 'content' when calling v1_emails_json_post");
    }

    # verify the required parameter 'recipients' is set
    unless (exists $args{'recipients'}) {
      croak("Missing the required parameter 'recipients' when calling v1_emails_json_post");
    }

    # parse inputs
    my $_resource_path = '/v1/emails.json';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # form params
    if ( exists $args{'api_key'} ) {
                $form_params->{'api_key'} = $self->{api_client}->to_form_value($args{'api_key'});
    }
    
    # form params
    if ( exists $args{'fromname'} ) {
                $form_params->{'fromname'} = $self->{api_client}->to_form_value($args{'fromname'});
    }
    
    # form params
    if ( exists $args{'from'} ) {
                $form_params->{'from'} = $self->{api_client}->to_form_value($args{'from'});
    }
    
    # form params
    if ( exists $args{'replytoid'} ) {
                $form_params->{'replytoid'} = $self->{api_client}->to_form_value($args{'replytoid'});
    }
    
    # form params
    if ( exists $args{'subject'} ) {
                $form_params->{'subject'} = $self->{api_client}->to_form_value($args{'subject'});
    }
    
    # form params
    if ( exists $args{'content'} ) {
                $form_params->{'content'} = $self->{api_client}->to_form_value($args{'content'});
    }
    
    # form params
    if ( exists $args{'footer'} ) {
                $form_params->{'footer'} = $self->{api_client}->to_form_value($args{'footer'});
    }
    
    # form params
    if ( exists $args{'template'} ) {
                $form_params->{'template'} = $self->{api_client}->to_form_value($args{'template'});
    }
    
    # form params
    if ( exists $args{'attachmentid'} ) {
                $form_params->{'attachmentid'} = $self->{api_client}->to_form_value($args{'attachmentid'});
    }
    
    # form params
    if ( exists $args{'clicktrack'} ) {
                $form_params->{'clicktrack'} = $self->{api_client}->to_form_value($args{'clicktrack'});
    }
    
    # form params
    if ( exists $args{'opentrack'} ) {
                $form_params->{'opentrack'} = $self->{api_client}->to_form_value($args{'opentrack'});
    }
    
    # form params
    if ( exists $args{'bcc'} ) {
                $form_params->{'bcc'} = $self->{api_client}->to_form_value($args{'bcc'});
    }
    
    # form params
    if ( exists $args{'recipients'} ) {
                $form_params->{'recipients'} = $self->{api_client}->to_form_value($args{'recipients'});
    }
    
    # form params
    if ( exists $args{'x_apiheader'} ) {
                $form_params->{'x-apiheader'} = $self->{api_client}->to_form_value($args{'x_apiheader'});
    }
    
    # form params
    if ( exists $args{'tags[]'} ) {
                $form_params->{'tags[]'} = $self->{api_client}->to_form_value($args{'tags[]'});
    }
    
    # form params
    if ( exists $args{'attributenames'} ) {
                $form_params->{'attributenames'} = $self->{api_client}->to_form_value($args{'attributenames'});
    }
    
    # form params
    if ( exists $args{'attributevalues'} ) {
                $form_params->{'attributevalues'} = $self->{api_client}->to_form_value($args{'attributevalues'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
